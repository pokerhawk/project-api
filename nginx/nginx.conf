events {
    # worker_processes 1; #CPU cores
    worker_connections 1024; #max connection per core
}


http {
    # Redirect HTTP to HTTPS
    server {
        listen 80;
        # server_name mymachine.com www.mymachine.com;
        server_name _;

        return 301 https://$host$request_uri;
    }
    
    # HTTPS Server
    server {
        listen 443 ssl;
        server_name _; # Matches any hostname, including direct IP access
        # server_name mymachine.com www.mymachine.com;

        # SSL Configuration            #name here must match created key
        ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;        # Path to your SSL certificate
        ssl_certificate_key /etc/ssl/certs/nginx-selfsigned.key;    # Path to your SSL key
        ssl_protocols TLSv1.2 TLSv1.3;

        # ssl_certificate /etc/letsencrypt/live/ec2-3-144-254-83.us-east-2.compute.amazonaws.com/fullchain.pem;
        # ssl_certificate_key /etc/letsencrypt/live/ec2-3-144-254-83.us-east-2.compute.amazonaws.com/privkey.pem;
        # ssl_protocols TLSv1.2;
        # ssl_prefer_server_ciphers on;

        # Proxy to Backend App
        location / {
            proxy_pass http://backend-app:8080;   # Backend app name if in same docker network
            # proxy_pass http://127.0.0.1:8080;   # Backend app address
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}